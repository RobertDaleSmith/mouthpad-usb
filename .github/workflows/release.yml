name: Auto Release on Version Bump

on:
  push:
    branches: [ main ]
    paths:
      - 'VERSION'
  workflow_dispatch:

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_changed: ${{ steps.check.outputs.changed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tag comparison

      - name: Read VERSION file
        id: version
        run: |
          VERSION=$(cat VERSION | tr -d '[:space:]')
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "üì¶ Current VERSION: ${VERSION}"

      - name: Check if version tag exists
        id: check
        run: |
          VERSION="${{ steps.version.outputs.version }}"

          # Check if tag exists (locally or remotely)
          if git rev-parse "v${VERSION}" >/dev/null 2>&1; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚è≠Ô∏è  Version v${VERSION} already exists - skipping release"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "‚ú® New version v${VERSION} detected - will create release"
          fi

  build-nrf52:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/zephyrproject-rtos/ci:v0.26.6
    env:
      CMAKE_PREFIX_PATH: /opt/toolchains
    strategy:
      matrix:
        board: [xiao_ble, adafruit_feather_nrf52840, nrf52840dongle_nordic, nrf52840dongle_april]
        include:
          - board: xiao_ble
            description: "Seeed XIAO nRF52840"
            board_target: xiao_ble
          - board: adafruit_feather_nrf52840
            description: "Adafruit Feather nRF52840 Express"
            board_target: adafruit_feather_nrf52840
          - board: nrf52840dongle_nordic
            description: "Nordic nRF52840 Dongle (PCA10059 - stock pins)"
            board_target: nrf52840dongle
            overlay: nrf52840dongle_nrf52840.nordic.overlay
            conf: nrf52840dongle_nrf52840.nordic.conf
          - board: nrf52840dongle_april
            description: "April Brothers nRF52840 Dongle (non-standard LED wiring)"
            board_target: nrf52840dongle
            overlay: nrf52840dongle_nrf52840.april.overlay
            conf: nrf52840dongle_nrf52840.april.conf

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: üíæ Cache Zephyr Workspace
        id: cache-workspace
        uses: actions/cache@v4
        with:
          path: /zephyr_workspace
          key: zephyr-workspace-ncs-v3.1.0-${{ runner.os }}
          restore-keys: |
            zephyr-workspace-ncs-v3.1.0-

      - name: ‚ôªÔ∏è Initialize Zephyr Workspace
        if: steps.cache-workspace.outputs.cache-hit != 'true'
        run: |
          mkdir -p /zephyr_workspace
          cd /zephyr_workspace
          west init -m https://github.com/nrfconnect/sdk-nrf.git --mr v3.1.0
          west update --narrow -o=--depth=1

      - name: üìÅ Copy App to Workspace
        run: |
          rm -rf /zephyr_workspace/app
          rm -rf /zephyr_workspace/build
          # Create app directory structure matching local layout
          mkdir -p /zephyr_workspace/ncs
          cp -r ncs/app /zephyr_workspace/ncs/app
          cp VERSION /zephyr_workspace/VERSION
          # Symlink for compatibility with build commands
          ln -s /zephyr_workspace/ncs/app /zephyr_workspace/app

      - name: üîß Apply Board Variant Files
        if: matrix.overlay
        run: |
          cd /zephyr_workspace/app/boards
          echo "Applying variant files for ${{ matrix.description }}"
          cp ${{ matrix.overlay }} nrf52840dongle_nrf52840.overlay
          echo "‚úì Overlay applied: ${{ matrix.overlay }}"
          if [ -n "${{ matrix.conf }}" ]; then
            cp ${{ matrix.conf }} nrf52840dongle_nrf52840.conf
            echo "‚úì Config applied: ${{ matrix.conf }}"
          fi

      - name: üíæ Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.cache/ccache
          key: ccache-v1-${{ runner.os }}-${{ matrix.board }}-${{ github.sha }}
          restore-keys: |
            ccache-v1-${{ runner.os }}-${{ matrix.board }}-
            ccache-v1-${{ runner.os }}-

      - name: üî® Build Project
        run: |
          cd /zephyr_workspace
          ccache -z
          west build \
              --board ${{ matrix.board_target }} \
              --pristine=always app
          ccache -sv

      - name: üì¶ Rename and Upload UF2 Artifacts
        run: |
          cd /zephyr_workspace
          VERSION="${{ needs.check-version.outputs.version }}"

          # Clean up any old UF2 files from cached workspace
          rm -f mp_usb_*.uf2

          # Copy and rename UF2 files with version number
          cp build/app/zephyr/zephyr.uf2 mp_usb_${VERSION}_${{ matrix.board }}.uf2
          echo "‚úÖ ${{ matrix.board }} UF2: mp_usb_${VERSION}_${{ matrix.board }}.uf2"
          ls -la *.uf2

      - name: üì¶ Upload Individual UF2 File
        uses: actions/upload-artifact@v4
        with:
          name: mp_usb_${{ matrix.board }}
          path: /zephyr_workspace/mp_usb_*.uf2
          retention-days: 90

  build-esp32:
    needs: check-version
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        board:
          - name: xiao_esp32s3
            display_name: "XIAO ESP32-S3"
            sdkconfig: "sdkconfig.defaults;sdkconfig.board.xiao"
          - name: lilygo_tdisplays3
            display_name: "LilyGo T-Display-S3"
            sdkconfig: "sdkconfig.defaults;sdkconfig.board.lilygo"

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Build ${{ matrix.board.display_name }}
        uses: espressif/esp-idf-ci-action@v1
        with:
          esp_idf_version: release-v6.0
          target: esp32s3
          path: esp
          command: |
            . ~/esp-idf/export.sh
            cd esp
            export SDKCONFIG_DEFAULTS="${{ matrix.board.sdkconfig }}"
            idf.py build

      - name: Prepare artifacts
        run: |
          mkdir -p artifacts
          VERSION="${{ needs.check-version.outputs.version }}"

          # Copy app binary only (preserves NVS/BLE bonds when flashed at 0x10000)
          cp esp/build/mouthpad_usb.bin artifacts/mp_usb_${VERSION}_${{ matrix.board.name }}.bin

          echo "‚úÖ ${{ matrix.board.display_name }} app binary created"
          ls -lh artifacts/

      - name: Upload firmware artifacts
        uses: actions/upload-artifact@v4
        with:
          name: mp_usb_${{ matrix.board.name }}
          path: artifacts/mp_usb_*.bin
          if-no-files-found: error
          retention-days: 90

  create-release:
    needs: [check-version, build-nrf52, build-esp32]
    if: needs.check-version.outputs.version_changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release package
        run: |
          mkdir -p release
          VERSION="${{ needs.check-version.outputs.version }}"

          echo "üì¶ Collecting firmware files for v${VERSION} release:"

          # Copy all firmware files from artifacts
          find artifacts -type f \( -name "*.uf2" -o -name "*.bin" \) -exec cp {} release/ \;

          echo ""
          echo "‚úÖ Release package contents:"
          ls -lh release/

          # Create checksums
          cd release
          sha256sum * > checksums.txt
          echo ""
          echo "üîê Checksums:"
          cat checksums.txt

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check-version.outputs.version }}
          name: MouthPad USB v${{ needs.check-version.outputs.version }}
          body: |
            ## MouthPad USB Firmware v${{ needs.check-version.outputs.version }}

            ### üì¶ Firmware Files

            **nRF52840 Boards (UF2 format - drag & drop to bootloader):**
            - `mp_usb_${{ needs.check-version.outputs.version }}_xiao_ble.uf2` - Seeed XIAO nRF52840
            - `mp_usb_${{ needs.check-version.outputs.version }}_adafruit_feather_nrf52840.uf2` - Adafruit Feather nRF52840 Express
            - `mp_usb_${{ needs.check-version.outputs.version }}_nrf52840dongle_nordic.uf2` - Nordic nRF52840 Dongle (stock pins)
            - `mp_usb_${{ needs.check-version.outputs.version }}_nrf52840dongle_april.uf2` - April Brothers nRF52840 Dongle

            **ESP32-S3 Boards (BIN format - flash with esptool):**
            - `mp_usb_${{ needs.check-version.outputs.version }}_xiao_esp32s3.bin` - XIAO ESP32-S3
            - `mp_usb_${{ needs.check-version.outputs.version }}_lilygo_tdisplays3.bin` - LilyGo T-Display-S3

            ### üîß Installation

            **nRF52840 (UF2):**
            1. Enter bootloader mode (double-tap reset button)
            2. Drag & drop the `.uf2` file to the mounted drive
            3. Device will automatically reboot with new firmware

            **ESP32-S3 (BIN):**
            ```bash
            esptool.py --chip esp32s3 write_flash 0x10000 mp_usb_<version>_<board>.bin
            ```

            **Note:** Flashing at 0x10000 (app partition) preserves NVS storage including BLE bonds.

            ### üîê Checksums
            See `checksums.txt` for SHA256 verification.
          files: |
            release/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Release Summary
        run: |
          VERSION="${{ needs.check-version.outputs.version }}"
          echo "### ‚úÖ Release v${VERSION} Created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`v${VERSION}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Firmware files:** $(ls release/ | grep -E '\.(uf2|bin)$' | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ **Release contents:**" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          ls -lh release/ >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
